question: $scope.question,
    answer: $scope.answer,
      badAnswer1: $scope.badAnswer1,
      badAnswer2: $scope.badAnswer2,
      badAnswer3: $scope.badAnswer3

.then(function (res))
      userId,
      quizInstance,
      question,
      answer,
      isCorrect,
      selectedAnswer,
      supportData,
      gender,
      age:
      )



/* Another model. Saves UserId and answer array
Format list of answers into an object that has those two properties 

var mongoose = require('mongoose');

var schema = mongoose.Schema({

	userId: { type: mongoose.Schema.Types.ObjectId, ref: 'Authenticate' },
	answers: Array

})
--------------------------------------
{
	userId: 234234234,
	answerArray: [...]
}

		answerArray: [
		question: String,
		answer: String,
		selectedAnswer: String,
		isCorrect: String,
		supportData: string
		]
/*

			// $scope.currentQuestion = quiz[currentIndex];
			// function userSelection(quiz){
			// 	for(var i = 0; i < userArr.length; i++){
			// 	var userSelection = 
			// 		[
			// 			{userAnswer: $rootScope.user},
			// 			{userAnswer: quiz[i].question},
			// 			{userAnswer: quiz[i].answer},
			// 			{userAnswer: quiz[i].isCorrect},
			// 			{userAnswer: quiz[i].selectedAnswer},
			// 			{userAnswer: quiz[i].supportData},
			// 			{userAnswer: quiz[i].isCorrect}
			// 		];
			// 	}
			// 	return quiz;
			// };

-----------------------save image in mongoose -------

/**
 * Module dependencies
 */
 
var express = require('express');
var fs = require('fs');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
 
// img path
var imgPath = '/path/to/some/img.png';
 
// connect to mongo
mongoose.connect('localhost', 'testing_storeImg');
 
// example schema
var schema = new Schema({
    img: { data: Buffer, contentType: String }
});
 
// our model
var A = mongoose.model('A', schema);
 
mongoose.connection.on('open', function () {
  console.error('mongo is open');
 
  // empty the collection
  A.remove(function (err) {
    if (err) throw err;
 
    console.error('removed old docs');
 
    // store an img in binary in mongo
    var a = new A;
    a.img.data = fs.readFileSync(imgPath);
    a.img.contentType = 'image/png';
    a.save(function (err, a) {
      if (err) throw err;
      console.error('saved img to mongo');
 
      // start a demo server
      var server = express.createServer();
      server.get('/', function (req, res, next) {
        A.findById(a, function (err, doc) {
          if (err) return next(err);
          res.contentType(doc.img.contentType);
          res.send(doc.img.data);
        });
      });
 
      server.on('close', function () {
        console.error('dropping db');
        mongoose.connection.db.dropDatabase(function () {
          console.error('closing db connection');
          mongoose.connection.close();
        });
      });
 
      server.listen(3333, function (err) {
        var address = server.address();
        console.error('server listening on http://%s:%d', address.address, address.port);
        console.error('press CTRL+C to exit');
      });
 
      process.on('SIGINT', function () {
        server.close();
      });
    });
  });
 
});





